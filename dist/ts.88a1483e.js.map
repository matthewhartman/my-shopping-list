{"version":3,"sources":["ts/constants.ts","ts/index.ts"],"names":[],"mappings":";AAAO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EAAA,IAAM,EAAW,mBAAjB,QAAA,SAAA;;AC+IN,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EA9ID,IAAA,EAAA,QAAA,eAEA,EAAA,WAKE,SAAA,EAAY,GACL,KAAA,KAAO,EACP,KAAA,MAAQ,GA8HjB,OA3HS,EAAA,UAAA,KAAP,WAAA,IAAA,EAAA,KACO,KAAA,wBAAwB,KAAK,WAChC,EAAK,SACL,EAAK,gBAIF,EAAA,UAAA,OAAP,WACO,KAAA,KAAK,mBAAmB,aAAc,0IAMrC,IAAA,EAAU,KAAK,KAAK,cAAc,UACxB,OAAZ,IACG,KAAA,MAAM,IAAI,SAAC,GACd,EAAQ,mBAAmB,YAAa,iDACF,EAAK,GAAE,4EACJ,EAAK,GAAE,oCAAoC,EAAK,MAAK,mIAI7E,EAAK,GAAE,4DAK5B,EAAQ,mBAAmB,YAAa,oOASnC,EAAA,UAAA,WAAP,WAAA,IAAA,EAAA,KACO,KAAA,KAAK,iBAAiB,SAAU,SAAC,GACpC,EAAM,iBACA,IAAA,EAAW,EAAM,OACnB,GAAkC,OAAlC,EAAS,QAAQ,aAAuB,CACpC,IAAA,EAAU,EAAS,cAAc,sBACvC,EAAK,QAAQ,GACb,EAAQ,MAAQ,MAGf,KAAA,KAAK,iBAAiB,QAAS,SAAC,GAC7B,IAAA,EAAW,EAAM,OACiB,OAApC,EAAS,QAAQ,gBACnB,EAAK,WAAW,KAGf,KAAA,KAAK,iBAAiB,QAAS,SAAC,GAC7B,IAAA,EAAW,EAAM,OACkB,OAArC,EAAS,QAAQ,iBACnB,EAAK,WAAW,MAKf,EAAA,UAAA,QAAP,SAAe,GACP,IAAA,EAAY,KAAK,KAAK,cAAc,aAGpC,EAAK,KAAO,KAAK,SAAS,SAAS,IAAI,OAAO,EAAG,GACjD,EAAQ,EAAQ,MACjB,KAAA,MAAM,KAAK,CAAC,GAAE,EAAE,MAAK,IAC1B,EAAU,mBAAmB,cAAe,6CACN,EAAE,wEACC,EAAE,oCAAoC,EAAQ,MAAK,mHAI3E,EAAE,wDAKd,KAAA,wBAAwB,KAAK,QAG7B,EAAA,UAAA,WAAP,SAAkB,GACV,IAAA,EAAK,EAAQ,aAAa,WAC1B,EAAQ,EAAQ,MAChB,EAAc,KAAK,MAAM,IAAI,SAAC,GAC9B,OAAA,EAAK,KAAO,EACP,CAAE,GAAE,EAAE,MAAK,GAEb,IAEJ,KAAA,MAAQ,EACR,KAAA,wBAAwB,KAAK,QAG7B,EAAA,UAAA,WAAP,SAAkB,GAmCnB,IAAA,EAlCS,EAAK,EAAS,aAAa,WAC3B,EAAc,KAAK,MAAM,OAAO,SAAC,GAAe,OAAA,EAAK,IAAM,IAC1B,OAAnC,EAAS,QAAQ,gBACW,QAA9B,EAAA,EAAS,QAAQ,qBAAa,IAAA,GAAA,EAAE,UAE7B,KAAA,MAAQ,EACR,KAAA,wBAAwB,KAAK,QAG7B,EAAA,UAAA,wBAAP,SAA+B,GAEL,OADA,aAAa,QAAQ,EAArB,WAEtB,aAAa,QAAQ,EAArB,SAA+B,KAAK,UAAU,KAI3C,EAAA,UAAA,sBAAP,WAAA,IAAA,EAAA,KACS,OAAA,IAAI,QAAQ,SAAC,GACZ,IAAA,EAAkB,aAAa,QAAQ,EAArB,UACA,OAApB,EACF,EAAK,MAAQ,KAAK,MAAM,GAExB,aAAa,QAAQ,EAArB,SAA+B,MAEjC,OAGN,EArIA,GA4IC,QAAA,eAAA,EAJD,IAAM,EAAM,SAAS,cAAc,QACnC,GAAY,OAAR,EAAc,CACV,IAAA,EAAc,IAAI,EAAe,GACvC,EAAY","file":"ts.88a1483e.js","sourceRoot":"../src","sourcesContent":["export const APP_NAME = 'MY_SHOPPING_LIST';\n","import { Item } from './interfaces';\nimport { APP_NAME } from './constants';\n\nexport class MyShoppingList {\n\n  private host: HTMLElement;\n  private items: Array<Item>;\n\n  constructor(host: HTMLElement) {\n    this.host = host;\n    this.items = [];\n  }\n\n  public init(): void {\n    this.loadLocalStorageItems().then(() => {\n      this.render();\n      this.bindEvents();\n    });\n  }\n\n  public render(): void {\n    this.host.insertAdjacentHTML('afterbegin', `\n      <div class=\"container\">\n        <h1 class=\"logo\">My Shopping List</h1>\n        <div class=\"items\"></div>\n      </div>\n    `);\n    const itemsEl = this.host.querySelector('.items') as HTMLElement;\n    if (itemsEl !== null) {\n      this.items.map((item: Item) => {\n        itemsEl.insertAdjacentHTML('beforeend', `\n          <form autocomplete=\"off\" id=\"item-${item.id}\" class=\"row edit-item\">\n            <input class=\"edit-input\" data-id=\"${item.id}\" type=\"text\" name=\"item\" value=\"${item.value}\" />\n            <button\n              type=\"button\"\n              class=\"delete-button delete-item\"\n              data-id=\"${item.id}\"\n            ></button>\n          </form>\n        `);\n    });\n    itemsEl.insertAdjacentHTML('beforeend', `\n      <form autocomplete=\"off\" class=\"row add-item\">\n        <input class=\"add\" type=\"text\" name=\"item\" placeholder=\"Add item...\" />\n        <input class=\"add-button add\" type=\"submit\" value=\"+\" />\n      </form>\n    `);\n    }\n  }\n\n  public bindEvents(): void {\n    this.host.addEventListener('submit', (event: Event) => {\n      event.preventDefault();\n      const targetEl = event.target as HTMLElement;\n      if (targetEl.closest('.add-item') !== null) {\n        const inputEl = targetEl.querySelector('input[type=\"text\"]') as HTMLInputElement;\n        this.addItem(inputEl);\n        inputEl.value = '';\n      }\n    });\n    this.host.addEventListener('input', (event: Event) => {\n      const targetEl = event.target as HTMLInputElement;\n      if (targetEl.closest('.edit-input') !== null) {\n        this.updateItem(targetEl);\n      }\n    });\n    this.host.addEventListener('click', (event: Event) => {\n      const targetEl = event.target as HTMLButtonElement;\n      if (targetEl.closest('.delete-item') !== null) {\n        this.removeItem(targetEl);\n      }\n    });\n  }\n\n  public addItem(inputEl: HTMLInputElement): void {\n    const addFormEl = this.host.querySelector('.add-item') as HTMLFormElement;\n    // Generate Random ID\n    // Try to avoid having duplicate IDs as they may clash\n    const id = 'i-' + Math.random().toString(36).substr(2, 8);\n    const value = inputEl.value;\n    this.items.push({id, value});\n    addFormEl.insertAdjacentHTML('beforebegin', `\n      <form autocomplete=\"off\" id=\"item-${id}\" class=\"row edit-item\">\n        <input class=\"edit-input\" data-id=\"${id}\" type=\"text\" name=\"item\" value=\"${inputEl.value}\" />\n        <button\n          type=\"button\"\n          class=\"delete-button delete-item\"\n          data-id=\"${id}\"\n        >\n        </button>\n      </form>\n    `);\n    this.updateLocalStorageItems(this.items);\n  }\n\n  public updateItem(inputEl: HTMLInputElement): void {\n    const id = inputEl.getAttribute('data-id');\n    const value = inputEl.value;\n    const updateItems = this.items.map((item: Item) => {\n      if (item.id === id) {\n        return { id, value }\n      }\n      return item\n    });\n    this.items = updateItems;\n    this.updateLocalStorageItems(this.items);\n  }\n\n  public removeItem(buttonEl: HTMLButtonElement): void {\n    const id = buttonEl.getAttribute('data-id');\n    const updateItems = this.items.filter((item: Item) => item.id != id);\n    if (buttonEl.closest('.edit-item') !== null) {\n      buttonEl.closest('.edit-item')?.remove();\n    }\n    this.items = updateItems;\n    this.updateLocalStorageItems(this.items);\n  }\n\n  public updateLocalStorageItems(items: Array<Item>): void {\n    const localStorageObj = localStorage.getItem(APP_NAME);\n    if (localStorageObj !== null) {\n      localStorage.setItem(APP_NAME, JSON.stringify(items));\n    }\n  }\n\n  public loadLocalStorageItems(): Promise<void> {\n    return new Promise((resolve) => {\n      const localStorageObj = localStorage.getItem(APP_NAME);\n      if (localStorageObj !== null) {\n        this.items = JSON.parse(localStorageObj);\n      } else {\n        localStorage.setItem(APP_NAME, '[]');\n      }\n      resolve();\n    });\n  }\n}\n\n// Initialise the class to run\nconst app = document.querySelector('#app') as HTMLElement;\nif (app !== null) {\n  const application = new MyShoppingList(app as HTMLElement);\n  application.init();\n}"]}